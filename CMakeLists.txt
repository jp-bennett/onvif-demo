cmake_minimum_required(VERSION 2.8.3)
project(onvif-demo)

#Here we add a Cmake Module abble to find GSOAP on your system, and find it
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

find_package(GSOAP 2.0.0 REQUIRED)

SET(GCC_COMPILE_FLAGS "-DWITH_OPENSSL -DWITH_DOM -I. -I /usr/share/gsoap")
SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} ${GCC_COMPILE_FLAGS}")
SET(GCC_LINK_FLAGS    "-lcrypto -lssl -lgsoap++ -lgsoapssl++")
SET(CMAKE_EXE_LINKER_FLAGS  "${GCC_LINK_FLAGS}")

#Create the directory that will host files generated by GSOAP
file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/generated)

#Add application files and gsoap dependencies
SET(SRC_CLIENT_FILES
	onvif-demo.cpp
	${CMAKE_BINARY_DIR}/generated/soapPullPointSubscriptionBindingProxy.cpp
	${CMAKE_BINARY_DIR}/generated/soapC.cpp
        ${GSOAP_PLUGIN_DIR}/smdevp.c
        ${GSOAP_PLUGIN_DIR}/mecevp.c
        ${GSOAP_PLUGIN_DIR}/wsaapi.c
        ${GSOAP_PLUGIN_DIR}/wsseapi.c
        ${GSOAP_PLUGIN_DIR}/../custom/struct_timeval.c
)


#some files are generated by gsoap
set_source_files_properties( ${CMAKE_BINARY_DIR}/generated/soapClientLib.c	 PROPERTIES GENERATED TRUE )
set_source_files_properties( ${CMAKE_BINARY_DIR}/generated/soapC.c	 PROPERTIES GENERATED TRUE )
set_source_files_properties( ${CMAKE_BINARY_DIR}/generated/soapPullPointSubscriptionBindingProxy.cpp	 PROPERTIES GENERATED TRUE )
set_source_files_properties( ${GSOAP_PLUGIN_DIR}/smdevp.c PROPERTIES LANGUAGE CXX)
set_source_files_properties( ${GSOAP_PLUGIN_DIR}/mecevp.c PROPERTIES LANGUAGE CXX)
set_source_files_properties( ${GSOAP_PLUGIN_DIR}/wsaapi.c PROPERTIES LANGUAGE CXX)
set_source_files_properties( ${GSOAP_PLUGIN_DIR}/wsseapi.c PROPERTIES LANGUAGE CXX)
set_source_files_properties( ${GSOAP_PLUGIN_DIR}/../custom/struct_timeval.c PROPERTIES LANGUAGE CXX)


#include .h folders here
include_directories(
	${CMAKE_BINARY_DIR}/generated
	${GSOAP_INCLUDE_DIR}
)

#add the source files to the client executable
add_executable(onvif-demo ${SRC_CLIENT_FILES} )

#Create a cmake target that generate gsoap files
add_custom_command(
    OUTPUT ${CMAKE_BINARY_DIR}/generated/bindings.h
    COMMAND ${GSOAP_WSDL2H} -d -P -O2 -o ${CMAKE_BINARY_DIR}/generated/bindings.h http://www.onvif.org/onvif/ver10/events/wsdl/event.wsdl
    COMMAND echo '\#import \"wsse.h\"' >> ${CMAKE_BINARY_DIR}/generated/bindings.h
    COMMENT "CREATING BINDING FILES"
)
add_custom_command(
    OUTPUT ${CMAKE_BINARY_DIR}/generated/soapC.cpp
    OUTPUT ${CMAKE_BINARY_DIR}/generated/soapPullPointSubscriptionBindingProxy.cpp
    COMMAND ${GSOAP_SOAPCPP2} -2 -C -I ${GSOAP_PLUGIN_DIR}/.. -I ${GSOAP_PLUGIN_DIR}/../import/ -d ${CMAKE_BINARY_DIR}/generated -j -x ${CMAKE_BINARY_DIR}/generated/bindings.h
    COMMAND ${GSOAP_SOAPCPP2} -a -x -L -pwsdd -I ${GSOAP_PLUGIN_DIR}/../import ${GSOAP_PLUGIN_DIR}/../import/wsdd5.h
    DEPENDS ${CMAKE_BINARY_DIR}/generated/bindings.h
    COMMENT "CREATING STUBS AND GLUE CODE"
)

add_custom_target(GSOAP_GENERATION_TARGET
	DEPENDS ${CMAKE_BINARY_DIR}/generated/soapC.cpp
	DEPENDS ${CMAKE_BINARY_DIR}/generated/soapPullPointSubscriptionBindingProxy.cpp
        DEPENDS ${GSOAP_PLUGIN_DIR}/smdevp.c
        DEPENDS ${GSOAP_PLUGIN_DIR}/mecevp.c
        DEPENDS ${GSOAP_PLUGIN_DIR}/wsaapi.c
        DEPENDS ${GSOAP_PLUGIN_DIR}/wsseapi.c
        DEPENDS ${GSOAP_PLUGIN_DIR}/../custom/struct_timeval.c
)

#Make sure that the client is compiled only after gsoap has been processed
add_dependencies(onvif-demo GSOAP_GENERATION_TARGET)


#extra libraries for the executable
target_link_libraries(onvif-demo ${GSOAP_C_LIBRARIES})
